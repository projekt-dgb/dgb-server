apiVersion: apps/v1
kind: Deployment
metadata:
  name: dgb-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dgb-server
  template:
    metadata:
      labels:
        app: dgb-server
    spec:
      containers:
        - name: server
          image: grundbuch/dgb-server:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
          - containerPort: 8080
          volumeMounts:
            - mountPath: "/mnt/data/files"
              name: persistent-volume
          env: 
            - name: ROOT_EMAIL
              valueFrom: 
                secretKeyRef: 
                  name: root-access 
                  key: email 
            - name: ROOT_PASSWORT 
              valueFrom: 
                secretKeyRef: 
                  name: root-access 
                  key: passwort 
            - name: SMTP_HOST 
              valueFrom: 
                secretKeyRef: 
                  name: root-access 
                  key: smtp-host 
            - name: SMTP_EMAIL
              valueFrom: 
                secretKeyRef: 
                  name: root-access 
                  key: smtp-email
            - name: SMTP_PASSWORT
              valueFrom: 
                secretKeyRef: 
                  name: root-access 
                  key: smtp-passwort  
        - name: synchronizer
          image: grundbuch/dgb-server:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
          ports:
          - containerPort: 8081
          volumeMounts:
            - mountPath: "/mnt/data/files"
              name: persistent-volume
          env: 
            - name: SYNC_MODE
              value: "1"
      volumes:
        - name: persistent-volume
          persistentVolumeClaim:
            claimName: persistent-volume
      imagePullSecrets:
        - name: registrypullsecret
---
apiVersion: v1
kind: Service
metadata:
  name: dgb-loadbalancer
  labels:
    app: dgb-loadbalancer
spec:
  type: LoadBalancer  
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: dgb-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dgb-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: grundbuch-test.eu
      http:
        paths:
          - path: /*
            pathType: Prefix
            backend:
              service:
                name: dgb-loadbalancer
                port:
                  number: 80
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-reader
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: persistent-volume
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: linode-block-storage-retain